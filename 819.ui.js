"use strict";(self.webpackChunkedumips64_webui=self.webpackChunkedumips64_webui||[]).push([[819],{3819:(e,n,i)=>{i.r(n),i.d(n,{getIconClasses:()=>u});var t,o=i(3072),s=i(2467),a=i(7264),r=i(4957);!function(e){e[e.FILE=0]="FILE",e[e.FOLDER=1]="FOLDER",e[e.ROOT_FOLDER=2]="ROOT_FOLDER"}(t||(t={}));var c=i(8881);const l=/(?:\/|^)(?:([^\/]+)\/)?([^\/]+)$/;function u(e,n,i,u,p){if(c.L.isThemeIcon(p))return[`codicon-${p.id}`,"predefined-file-icon"];if(a.r.isUri(p))return[];const h=u===t.ROOT_FOLDER?["rootfolder-icon"]:u===t.FOLDER?["folder-icon"]:["file-icon"];if(i){let a;if(i.scheme===o.ny.data)a=s.B6.parseMetaData(i).get(s.B6.META_DATA_LABEL);else{const e=i.path.match(l);e?(a=f(e[2].toLowerCase()),e[1]&&h.push(`${f(e[1].toLowerCase())}-name-dir-icon`)):a=f(i.authority.toLowerCase())}if(u===t.ROOT_FOLDER)h.push(`${a}-root-name-folder-icon`);else if(u===t.FOLDER)h.push(`${a}-name-folder-icon`);else{if(a){if(h.push(`${a}-name-file-icon`),h.push("name-file-icon"),a.length<=255){const e=a.split(".");for(let n=1;n<e.length;n++)h.push(`${e.slice(n).join(".")}-ext-file-icon`)}h.push("ext-file-icon")}const t=function(e,n,i){if(!i)return null;let t=null;if(i.scheme===o.ny.data){const e=s.B6.parseMetaData(i).get(s.B6.META_DATA_MIME);e&&(t=n.getLanguageIdByMimeType(e))}else{const n=e.getModel(i);n&&(t=n.getLanguageId())}return t&&t!==r.vH?t:n.guessLanguageIdByFilepathOrFirstLine(i)}(e,n,i);t&&h.push(`${f(t)}-lang-file-icon`)}}return h}function f(e){return e.replace(/[\s]/g,"/")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,