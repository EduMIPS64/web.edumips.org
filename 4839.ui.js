/*! For license information please see 4839.ui.js.LICENSE.txt */
"use strict";(self.webpackChunkedumips64_webui=self.webpackChunkedumips64_webui||[]).push([[4839],{44839:(e,t,n)=>{n.r(t),n.d(t,{CompletionAdapter:()=>Vt,DefinitionAdapter:()=>Gt,DiagnosticsAdapter:()=>Ot,DocumentColorAdapter:()=>ln,DocumentFormattingEditProvider:()=>an,DocumentHighlightAdapter:()=>Qt,DocumentLinkAdapter:()=>on,DocumentRangeFormattingEditProvider:()=>sn,DocumentSymbolAdapter:()=>tn,FoldingRangeAdapter:()=>gn,HoverAdapter:()=>zt,ReferenceAdapter:()=>Zt,RenameAdapter:()=>en,SelectionRangeAdapter:()=>fn,WorkerManager:()=>jt,fromPosition:()=>Bt,fromRange:()=>Wt,getWorker:()=>Vn,setupMode:()=>Wn,toRange:()=>Kt,toTextEdit:()=>Xt});var r=n(91185),i=Object.defineProperty,o=Object.getOwnPropertyDescriptor,a=Object.getOwnPropertyNames,s=Object.prototype.hasOwnProperty,c=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let c of a(t))s.call(e,c)||c===n||i(e,c,{get:()=>t[c],enumerable:!(r=o(t,c))||r.enumerable});return e},u={};c(u,r,"default");var d,l,g,f,h,m,p,v,b,k,C,_,w,y,x,E,I,A,S,T,L,R,M,F,P,j,D,N,O,U,V,B,W,K,H,X,z,q,$,Q,J,G,Y,Z,ee,te,ne,re,ie,oe,ae,se,ce,ue,de,le,ge,fe,he,me,pe,ve,be,ke,Ce,_e,we,ye,xe,Ee,Ie,Ae,Se,Te,Le,Re,Me,Fe,Pe,je,De,Ne,Oe,Ue,Ve,Be,We,Ke,He,Xe,ze,qe,$e,Qe,Je,Ge,Ye,Ze,et,tt,nt,rt,it,ot,at,st,ct,ut,dt,lt,gt,ft,ht,mt,pt,vt,bt,kt,Ct,_t,wt,yt,xt,Et,It,At,St,Tt,Lt,Rt,Mt,Ft,Pt,jt=class{constructor(e){this._defaults=e,this._worker=null,this._client=null,this._idleCheckInterval=window.setInterval((()=>this._checkIfIdle()),3e4),this._lastUsedTime=0,this._configChangeListener=this._defaults.onDidChange((()=>this._stopWorker()))}_stopWorker(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null}dispose(){clearInterval(this._idleCheckInterval),this._configChangeListener.dispose(),this._stopWorker()}_checkIfIdle(){this._worker&&Date.now()-this._lastUsedTime>12e4&&this._stopWorker()}_getClient(){return this._lastUsedTime=Date.now(),this._client||(this._worker=u.editor.createWebWorker({moduleId:"vs/language/json/jsonWorker",label:this._defaults.languageId,createData:{languageSettings:this._defaults.diagnosticsOptions,languageId:this._defaults.languageId,enableSchemaRequest:this._defaults.diagnosticsOptions.enableSchemaRequest}}),this._client=this._worker.getProxy()),this._client}getLanguageServiceWorker(...e){let t;return this._getClient().then((e=>{t=e})).then((t=>{if(this._worker)return this._worker.withSyncedResources(e)})).then((e=>t))}};(d||(d={})).is=function(e){return"string"==typeof e},(l||(l={})).is=function(e){return"string"==typeof e},(f=g||(g={})).MIN_VALUE=-2147483648,f.MAX_VALUE=2147483647,f.is=function(e){return"number"==typeof e&&f.MIN_VALUE<=e&&e<=f.MAX_VALUE},(m=h||(h={})).MIN_VALUE=0,m.MAX_VALUE=2147483647,m.is=function(e){return"number"==typeof e&&m.MIN_VALUE<=e&&e<=m.MAX_VALUE},(v=p||(p={})).create=function(e,t){return e===Number.MAX_VALUE&&(e=h.MAX_VALUE),t===Number.MAX_VALUE&&(t=h.MAX_VALUE),{line:e,character:t}},v.is=function(e){let t=e;return Dt.objectLiteral(t)&&Dt.uinteger(t.line)&&Dt.uinteger(t.character)},(k=b||(b={})).create=function(e,t,n,r){if(Dt.uinteger(e)&&Dt.uinteger(t)&&Dt.uinteger(n)&&Dt.uinteger(r))return{start:p.create(e,t),end:p.create(n,r)};if(p.is(e)&&p.is(t))return{start:e,end:t};throw new Error(`Range#create called with invalid arguments[${e}, ${t}, ${n}, ${r}]`)},k.is=function(e){let t=e;return Dt.objectLiteral(t)&&p.is(t.start)&&p.is(t.end)},(_=C||(C={})).create=function(e,t){return{uri:e,range:t}},_.is=function(e){let t=e;return Dt.objectLiteral(t)&&b.is(t.range)&&(Dt.string(t.uri)||Dt.undefined(t.uri))},(y=w||(w={})).create=function(e,t,n,r){return{targetUri:e,targetRange:t,targetSelectionRange:n,originSelectionRange:r}},y.is=function(e){let t=e;return Dt.objectLiteral(t)&&b.is(t.targetRange)&&Dt.string(t.targetUri)&&b.is(t.targetSelectionRange)&&(b.is(t.originSelectionRange)||Dt.undefined(t.originSelectionRange))},(E=x||(x={})).create=function(e,t,n,r){return{red:e,green:t,blue:n,alpha:r}},E.is=function(e){const t=e;return Dt.objectLiteral(t)&&Dt.numberRange(t.red,0,1)&&Dt.numberRange(t.green,0,1)&&Dt.numberRange(t.blue,0,1)&&Dt.numberRange(t.alpha,0,1)},(A=I||(I={})).create=function(e,t){return{range:e,color:t}},A.is=function(e){const t=e;return Dt.objectLiteral(t)&&b.is(t.range)&&x.is(t.color)},(T=S||(S={})).create=function(e,t,n){return{label:e,textEdit:t,additionalTextEdits:n}},T.is=function(e){const t=e;return Dt.objectLiteral(t)&&Dt.string(t.label)&&(Dt.undefined(t.textEdit)||X.is(t))&&(Dt.undefined(t.additionalTextEdits)||Dt.typedArray(t.additionalTextEdits,X.is))},(R=L||(L={})).Comment="comment",R.Imports="imports",R.Region="region",(F=M||(M={})).create=function(e,t,n,r,i,o){const a={startLine:e,endLine:t};return Dt.defined(n)&&(a.startCharacter=n),Dt.defined(r)&&(a.endCharacter=r),Dt.defined(i)&&(a.kind=i),Dt.defined(o)&&(a.collapsedText=o),a},F.is=function(e){const t=e;return Dt.objectLiteral(t)&&Dt.uinteger(t.startLine)&&Dt.uinteger(t.startLine)&&(Dt.undefined(t.startCharacter)||Dt.uinteger(t.startCharacter))&&(Dt.undefined(t.endCharacter)||Dt.uinteger(t.endCharacter))&&(Dt.undefined(t.kind)||Dt.string(t.kind))},(j=P||(P={})).create=function(e,t){return{location:e,message:t}},j.is=function(e){let t=e;return Dt.defined(t)&&C.is(t.location)&&Dt.string(t.message)},(N=D||(D={})).Error=1,N.Warning=2,N.Information=3,N.Hint=4,(U=O||(O={})).Unnecessary=1,U.Deprecated=2,(V||(V={})).is=function(e){const t=e;return Dt.objectLiteral(t)&&Dt.string(t.href)},(W=B||(B={})).create=function(e,t,n,r,i,o){let a={range:e,message:t};return Dt.defined(n)&&(a.severity=n),Dt.defined(r)&&(a.code=r),Dt.defined(i)&&(a.source=i),Dt.defined(o)&&(a.relatedInformation=o),a},W.is=function(e){var t;let n=e;return Dt.defined(n)&&b.is(n.range)&&Dt.string(n.message)&&(Dt.number(n.severity)||Dt.undefined(n.severity))&&(Dt.integer(n.code)||Dt.string(n.code)||Dt.undefined(n.code))&&(Dt.undefined(n.codeDescription)||Dt.string(null===(t=n.codeDescription)||void 0===t?void 0:t.href))&&(Dt.string(n.source)||Dt.undefined(n.source))&&(Dt.undefined(n.relatedInformation)||Dt.typedArray(n.relatedInformation,P.is))},(H=K||(K={})).create=function(e,t,...n){let r={title:e,command:t};return Dt.defined(n)&&n.length>0&&(r.arguments=n),r},H.is=function(e){let t=e;return Dt.defined(t)&&Dt.string(t.title)&&Dt.string(t.command)},(z=X||(X={})).replace=function(e,t){return{range:e,newText:t}},z.insert=function(e,t){return{range:{start:e,end:e},newText:t}},z.del=function(e){return{range:e,newText:""}},z.is=function(e){const t=e;return Dt.objectLiteral(t)&&Dt.string(t.newText)&&b.is(t.range)},($=q||(q={})).create=function(e,t,n){const r={label:e};return void 0!==t&&(r.needsConfirmation=t),void 0!==n&&(r.description=n),r},$.is=function(e){const t=e;return Dt.objectLiteral(t)&&Dt.string(t.label)&&(Dt.boolean(t.needsConfirmation)||void 0===t.needsConfirmation)&&(Dt.string(t.description)||void 0===t.description)},(Q||(Q={})).is=function(e){const t=e;return Dt.string(t)},(G=J||(J={})).replace=function(e,t,n){return{range:e,newText:t,annotationId:n}},G.insert=function(e,t,n){return{range:{start:e,end:e},newText:t,annotationId:n}},G.del=function(e,t){return{range:e,newText:"",annotationId:t}},G.is=function(e){const t=e;return X.is(t)&&(q.is(t.annotationId)||Q.is(t.annotationId))},(Z=Y||(Y={})).create=function(e,t){return{textDocument:e,edits:t}},Z.is=function(e){let t=e;return Dt.defined(t)&&le.is(t.textDocument)&&Array.isArray(t.edits)},(te=ee||(ee={})).create=function(e,t,n){let r={kind:"create",uri:e};return void 0===t||void 0===t.overwrite&&void 0===t.ignoreIfExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},te.is=function(e){let t=e;return t&&"create"===t.kind&&Dt.string(t.uri)&&(void 0===t.options||(void 0===t.options.overwrite||Dt.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||Dt.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||Q.is(t.annotationId))},(re=ne||(ne={})).create=function(e,t,n,r){let i={kind:"rename",oldUri:e,newUri:t};return void 0===n||void 0===n.overwrite&&void 0===n.ignoreIfExists||(i.options=n),void 0!==r&&(i.annotationId=r),i},re.is=function(e){let t=e;return t&&"rename"===t.kind&&Dt.string(t.oldUri)&&Dt.string(t.newUri)&&(void 0===t.options||(void 0===t.options.overwrite||Dt.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||Dt.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||Q.is(t.annotationId))},(oe=ie||(ie={})).create=function(e,t,n){let r={kind:"delete",uri:e};return void 0===t||void 0===t.recursive&&void 0===t.ignoreIfNotExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},oe.is=function(e){let t=e;return t&&"delete"===t.kind&&Dt.string(t.uri)&&(void 0===t.options||(void 0===t.options.recursive||Dt.boolean(t.options.recursive))&&(void 0===t.options.ignoreIfNotExists||Dt.boolean(t.options.ignoreIfNotExists)))&&(void 0===t.annotationId||Q.is(t.annotationId))},(ae||(ae={})).is=function(e){let t=e;return t&&(void 0!==t.changes||void 0!==t.documentChanges)&&(void 0===t.documentChanges||t.documentChanges.every((e=>Dt.string(e.kind)?ee.is(e)||ne.is(e)||ie.is(e):Y.is(e))))},(ce=se||(se={})).create=function(e){return{uri:e}},ce.is=function(e){let t=e;return Dt.defined(t)&&Dt.string(t.uri)},(de=ue||(ue={})).create=function(e,t){return{uri:e,version:t}},de.is=function(e){let t=e;return Dt.defined(t)&&Dt.string(t.uri)&&Dt.integer(t.version)},(ge=le||(le={})).create=function(e,t){return{uri:e,version:t}},ge.is=function(e){let t=e;return Dt.defined(t)&&Dt.string(t.uri)&&(null===t.version||Dt.integer(t.version))},(he=fe||(fe={})).create=function(e,t,n,r){return{uri:e,languageId:t,version:n,text:r}},he.is=function(e){let t=e;return Dt.defined(t)&&Dt.string(t.uri)&&Dt.string(t.languageId)&&Dt.integer(t.version)&&Dt.string(t.text)},(pe=me||(me={})).PlainText="plaintext",pe.Markdown="markdown",pe.is=function(e){const t=e;return t===pe.PlainText||t===pe.Markdown},(ve||(ve={})).is=function(e){const t=e;return Dt.objectLiteral(e)&&me.is(t.kind)&&Dt.string(t.value)},(ke=be||(be={})).Text=1,ke.Method=2,ke.Function=3,ke.Constructor=4,ke.Field=5,ke.Variable=6,ke.Class=7,ke.Interface=8,ke.Module=9,ke.Property=10,ke.Unit=11,ke.Value=12,ke.Enum=13,ke.Keyword=14,ke.Snippet=15,ke.Color=16,ke.File=17,ke.Reference=18,ke.Folder=19,ke.EnumMember=20,ke.Constant=21,ke.Struct=22,ke.Event=23,ke.Operator=24,ke.TypeParameter=25,(_e=Ce||(Ce={})).PlainText=1,_e.Snippet=2,(we||(we={})).Deprecated=1,(xe=ye||(ye={})).create=function(e,t,n){return{newText:e,insert:t,replace:n}},xe.is=function(e){const t=e;return t&&Dt.string(t.newText)&&b.is(t.insert)&&b.is(t.replace)},(Ie=Ee||(Ee={})).asIs=1,Ie.adjustIndentation=2,(Ae||(Ae={})).is=function(e){const t=e;return t&&(Dt.string(t.detail)||void 0===t.detail)&&(Dt.string(t.description)||void 0===t.description)},(Se||(Se={})).create=function(e){return{label:e}},(Te||(Te={})).create=function(e,t){return{items:e||[],isIncomplete:!!t}},(Re=Le||(Le={})).fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")},Re.is=function(e){const t=e;return Dt.string(t)||Dt.objectLiteral(t)&&Dt.string(t.language)&&Dt.string(t.value)},(Me||(Me={})).is=function(e){let t=e;return!!t&&Dt.objectLiteral(t)&&(ve.is(t.contents)||Le.is(t.contents)||Dt.typedArray(t.contents,Le.is))&&(void 0===e.range||b.is(e.range))},(Fe||(Fe={})).create=function(e,t){return t?{label:e,documentation:t}:{label:e}},(Pe||(Pe={})).create=function(e,t,...n){let r={label:e};return Dt.defined(t)&&(r.documentation=t),Dt.defined(n)?r.parameters=n:r.parameters=[],r},(De=je||(je={})).Text=1,De.Read=2,De.Write=3,(Ne||(Ne={})).create=function(e,t){let n={range:e};return Dt.number(t)&&(n.kind=t),n},(Ue=Oe||(Oe={})).File=1,Ue.Module=2,Ue.Namespace=3,Ue.Package=4,Ue.Class=5,Ue.Method=6,Ue.Property=7,Ue.Field=8,Ue.Constructor=9,Ue.Enum=10,Ue.Interface=11,Ue.Function=12,Ue.Variable=13,Ue.Constant=14,Ue.String=15,Ue.Number=16,Ue.Boolean=17,Ue.Array=18,Ue.Object=19,Ue.Key=20,Ue.Null=21,Ue.EnumMember=22,Ue.Struct=23,Ue.Event=24,Ue.Operator=25,Ue.TypeParameter=26,(Ve||(Ve={})).Deprecated=1,(Be||(Be={})).create=function(e,t,n,r,i){let o={name:e,kind:t,location:{uri:r,range:n}};return i&&(o.containerName=i),o},(We||(We={})).create=function(e,t,n,r){return void 0!==r?{name:e,kind:t,location:{uri:n,range:r}}:{name:e,kind:t,location:{uri:n}}},(He=Ke||(Ke={})).create=function(e,t,n,r,i,o){let a={name:e,detail:t,kind:n,range:r,selectionRange:i};return void 0!==o&&(a.children=o),a},He.is=function(e){let t=e;return t&&Dt.string(t.name)&&Dt.number(t.kind)&&b.is(t.range)&&b.is(t.selectionRange)&&(void 0===t.detail||Dt.string(t.detail))&&(void 0===t.deprecated||Dt.boolean(t.deprecated))&&(void 0===t.children||Array.isArray(t.children))&&(void 0===t.tags||Array.isArray(t.tags))},(ze=Xe||(Xe={})).Empty="",ze.QuickFix="quickfix",ze.Refactor="refactor",ze.RefactorExtract="refactor.extract",ze.RefactorInline="refactor.inline",ze.RefactorRewrite="refactor.rewrite",ze.Source="source",ze.SourceOrganizeImports="source.organizeImports",ze.SourceFixAll="source.fixAll",($e=qe||(qe={})).Invoked=1,$e.Automatic=2,(Je=Qe||(Qe={})).create=function(e,t,n){let r={diagnostics:e};return null!=t&&(r.only=t),null!=n&&(r.triggerKind=n),r},Je.is=function(e){let t=e;return Dt.defined(t)&&Dt.typedArray(t.diagnostics,B.is)&&(void 0===t.only||Dt.typedArray(t.only,Dt.string))&&(void 0===t.triggerKind||t.triggerKind===qe.Invoked||t.triggerKind===qe.Automatic)},(Ye=Ge||(Ge={})).create=function(e,t,n){let r={title:e},i=!0;return"string"==typeof t?(i=!1,r.kind=t):K.is(t)?r.command=t:r.edit=t,i&&void 0!==n&&(r.kind=n),r},Ye.is=function(e){let t=e;return t&&Dt.string(t.title)&&(void 0===t.diagnostics||Dt.typedArray(t.diagnostics,B.is))&&(void 0===t.kind||Dt.string(t.kind))&&(void 0!==t.edit||void 0!==t.command)&&(void 0===t.command||K.is(t.command))&&(void 0===t.isPreferred||Dt.boolean(t.isPreferred))&&(void 0===t.edit||ae.is(t.edit))},(et=Ze||(Ze={})).create=function(e,t){let n={range:e};return Dt.defined(t)&&(n.data=t),n},et.is=function(e){let t=e;return Dt.defined(t)&&b.is(t.range)&&(Dt.undefined(t.command)||K.is(t.command))},(nt=tt||(tt={})).create=function(e,t){return{tabSize:e,insertSpaces:t}},nt.is=function(e){let t=e;return Dt.defined(t)&&Dt.uinteger(t.tabSize)&&Dt.boolean(t.insertSpaces)},(it=rt||(rt={})).create=function(e,t,n){return{range:e,target:t,data:n}},it.is=function(e){let t=e;return Dt.defined(t)&&b.is(t.range)&&(Dt.undefined(t.target)||Dt.string(t.target))},(at=ot||(ot={})).create=function(e,t){return{range:e,parent:t}},at.is=function(e){let t=e;return Dt.objectLiteral(t)&&b.is(t.range)&&(void 0===t.parent||at.is(t.parent))},(ct=st||(st={})).namespace="namespace",ct.type="type",ct.class="class",ct.enum="enum",ct.interface="interface",ct.struct="struct",ct.typeParameter="typeParameter",ct.parameter="parameter",ct.variable="variable",ct.property="property",ct.enumMember="enumMember",ct.event="event",ct.function="function",ct.method="method",ct.macro="macro",ct.keyword="keyword",ct.modifier="modifier",ct.comment="comment",ct.string="string",ct.number="number",ct.regexp="regexp",ct.operator="operator",ct.decorator="decorator",(dt=ut||(ut={})).declaration="declaration",dt.definition="definition",dt.readonly="readonly",dt.static="static",dt.deprecated="deprecated",dt.abstract="abstract",dt.async="async",dt.modification="modification",dt.documentation="documentation",dt.defaultLibrary="defaultLibrary",(lt||(lt={})).is=function(e){const t=e;return Dt.objectLiteral(t)&&(void 0===t.resultId||"string"==typeof t.resultId)&&Array.isArray(t.data)&&(0===t.data.length||"number"==typeof t.data[0])},(ft=gt||(gt={})).create=function(e,t){return{range:e,text:t}},ft.is=function(e){const t=e;return null!=t&&b.is(t.range)&&Dt.string(t.text)},(mt=ht||(ht={})).create=function(e,t,n){return{range:e,variableName:t,caseSensitiveLookup:n}},mt.is=function(e){const t=e;return null!=t&&b.is(t.range)&&Dt.boolean(t.caseSensitiveLookup)&&(Dt.string(t.variableName)||void 0===t.variableName)},(vt=pt||(pt={})).create=function(e,t){return{range:e,expression:t}},vt.is=function(e){const t=e;return null!=t&&b.is(t.range)&&(Dt.string(t.expression)||void 0===t.expression)},(kt=bt||(bt={})).create=function(e,t){return{frameId:e,stoppedLocation:t}},kt.is=function(e){const t=e;return Dt.defined(t)&&b.is(e.stoppedLocation)},(_t=Ct||(Ct={})).Type=1,_t.Parameter=2,_t.is=function(e){return 1===e||2===e},(yt=wt||(wt={})).create=function(e){return{value:e}},yt.is=function(e){const t=e;return Dt.objectLiteral(t)&&(void 0===t.tooltip||Dt.string(t.tooltip)||ve.is(t.tooltip))&&(void 0===t.location||C.is(t.location))&&(void 0===t.command||K.is(t.command))},(Et=xt||(xt={})).create=function(e,t,n){const r={position:e,label:t};return void 0!==n&&(r.kind=n),r},Et.is=function(e){const t=e;return Dt.objectLiteral(t)&&p.is(t.position)&&(Dt.string(t.label)||Dt.typedArray(t.label,wt.is))&&(void 0===t.kind||Ct.is(t.kind))&&void 0===t.textEdits||Dt.typedArray(t.textEdits,X.is)&&(void 0===t.tooltip||Dt.string(t.tooltip)||ve.is(t.tooltip))&&(void 0===t.paddingLeft||Dt.boolean(t.paddingLeft))&&(void 0===t.paddingRight||Dt.boolean(t.paddingRight))},(It||(It={})).createSnippet=function(e){return{kind:"snippet",value:e}},(At||(At={})).create=function(e,t,n,r){return{insertText:e,filterText:t,range:n,command:r}},(St||(St={})).create=function(e){return{items:e}},(Lt=Tt||(Tt={})).Invoked=0,Lt.Automatic=1,(Rt||(Rt={})).create=function(e,t){return{range:e,text:t}},(Mt||(Mt={})).create=function(e,t){return{triggerKind:e,selectedCompletionInfo:t}},(Ft||(Ft={})).is=function(e){const t=e;return Dt.objectLiteral(t)&&l.is(t.uri)&&Dt.string(t.name)},function(e){function t(e,n){if(e.length<=1)return e;const r=e.length/2|0,i=e.slice(0,r),o=e.slice(r);t(i,n),t(o,n);let a=0,s=0,c=0;for(;a<i.length&&s<o.length;){let t=n(i[a],o[s]);e[c++]=t<=0?i[a++]:o[s++]}for(;a<i.length;)e[c++]=i[a++];for(;s<o.length;)e[c++]=o[s++];return e}e.create=function(e,t,n,r){return new Nt(e,t,n,r)},e.is=function(e){let t=e;return!!(Dt.defined(t)&&Dt.string(t.uri)&&(Dt.undefined(t.languageId)||Dt.string(t.languageId))&&Dt.uinteger(t.lineCount)&&Dt.func(t.getText)&&Dt.func(t.positionAt)&&Dt.func(t.offsetAt))},e.applyEdits=function(e,n){let r=e.getText(),i=t(n,((e,t)=>{let n=e.range.start.line-t.range.start.line;return 0===n?e.range.start.character-t.range.start.character:n})),o=r.length;for(let t=i.length-1;t>=0;t--){let n=i[t],a=e.offsetAt(n.range.start),s=e.offsetAt(n.range.end);if(!(s<=o))throw new Error("Overlapping edit");r=r.substring(0,a)+n.newText+r.substring(s,r.length),o=a}return r}}(Pt||(Pt={}));var Dt,Nt=class{constructor(e,t,n,r){this._uri=e,this._languageId=t,this._version=n,this._content=r,this._lineOffsets=void 0}get uri(){return this._uri}get languageId(){return this._languageId}get version(){return this._version}getText(e){if(e){let t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content}update(e,t){this._content=e.text,this._version=t,this._lineOffsets=void 0}getLineOffsets(){if(void 0===this._lineOffsets){let e=[],t=this._content,n=!0;for(let r=0;r<t.length;r++){n&&(e.push(r),n=!1);let i=t.charAt(r);n="\r"===i||"\n"===i,"\r"===i&&r+1<t.length&&"\n"===t.charAt(r+1)&&r++}n&&t.length>0&&e.push(t.length),this._lineOffsets=e}return this._lineOffsets}positionAt(e){e=Math.max(Math.min(e,this._content.length),0);let t=this.getLineOffsets(),n=0,r=t.length;if(0===r)return p.create(0,e);for(;n<r;){let i=Math.floor((n+r)/2);t[i]>e?r=i:n=i+1}let i=n-1;return p.create(i,e-t[i])}offsetAt(e){let t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;let n=t[e.line],r=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(n+e.character,r),n)}get lineCount(){return this.getLineOffsets().length}};!function(e){const t=Object.prototype.toString;e.defined=function(e){return void 0!==e},e.undefined=function(e){return void 0===e},e.boolean=function(e){return!0===e||!1===e},e.string=function(e){return"[object String]"===t.call(e)},e.number=function(e){return"[object Number]"===t.call(e)},e.numberRange=function(e,n,r){return"[object Number]"===t.call(e)&&n<=e&&e<=r},e.integer=function(e){return"[object Number]"===t.call(e)&&-2147483648<=e&&e<=2147483647},e.uinteger=function(e){return"[object Number]"===t.call(e)&&0<=e&&e<=2147483647},e.func=function(e){return"[object Function]"===t.call(e)},e.objectLiteral=function(e){return null!==e&&"object"==typeof e},e.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)}}(Dt||(Dt={}));var Ot=class{constructor(e,t,n){this._languageId=e,this._worker=t,this._disposables=[],this._listener=Object.create(null);const r=e=>{let t,n=e.getLanguageId();n===this._languageId&&(this._listener[e.uri.toString()]=e.onDidChangeContent((()=>{window.clearTimeout(t),t=window.setTimeout((()=>this._doValidate(e.uri,n)),500)})),this._doValidate(e.uri,n))},i=e=>{u.editor.setModelMarkers(e,this._languageId,[]);let t=e.uri.toString(),n=this._listener[t];n&&(n.dispose(),delete this._listener[t])};this._disposables.push(u.editor.onDidCreateModel(r)),this._disposables.push(u.editor.onWillDisposeModel(i)),this._disposables.push(u.editor.onDidChangeModelLanguage((e=>{i(e.model),r(e.model)}))),this._disposables.push(n((e=>{u.editor.getModels().forEach((e=>{e.getLanguageId()===this._languageId&&(i(e),r(e))}))}))),this._disposables.push({dispose:()=>{u.editor.getModels().forEach(i);for(let e in this._listener)this._listener[e].dispose()}}),u.editor.getModels().forEach(r)}dispose(){this._disposables.forEach((e=>e&&e.dispose())),this._disposables.length=0}_doValidate(e,t){this._worker(e).then((t=>t.doValidation(e.toString()))).then((n=>{const r=n.map((e=>function(e,t){let n="number"==typeof t.code?String(t.code):t.code;return{severity:Ut(t.severity),startLineNumber:t.range.start.line+1,startColumn:t.range.start.character+1,endLineNumber:t.range.end.line+1,endColumn:t.range.end.character+1,message:t.message,code:n,source:t.source}}(0,e)));let i=u.editor.getModel(e);i&&i.getLanguageId()===t&&u.editor.setModelMarkers(i,t,r)})).then(void 0,(e=>{console.error(e)}))}};function Ut(e){switch(e){case D.Error:return u.MarkerSeverity.Error;case D.Warning:return u.MarkerSeverity.Warning;case D.Information:return u.MarkerSeverity.Info;case D.Hint:return u.MarkerSeverity.Hint;default:return u.MarkerSeverity.Info}}var Vt=class{constructor(e,t){this._worker=e,this._triggerCharacters=t}get triggerCharacters(){return this._triggerCharacters}provideCompletionItems(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.doComplete(i.toString(),Bt(t)))).then((n=>{if(!n)return;const r=e.getWordUntilPosition(t),i=new u.Range(t.lineNumber,r.startColumn,t.lineNumber,r.endColumn),o=n.items.map((e=>{const t={label:e.label,insertText:e.insertText||e.label,sortText:e.sortText,filterText:e.filterText,documentation:e.documentation,detail:e.detail,command:(n=e.command,n&&"editor.action.triggerSuggest"===n.command?{id:n.command,title:n.title,arguments:n.arguments}:void 0),range:i,kind:Ht(e.kind)};var n,r;return e.textEdit&&(void 0!==(r=e.textEdit).insert&&void 0!==r.replace?t.range={insert:Kt(e.textEdit.insert),replace:Kt(e.textEdit.replace)}:t.range=Kt(e.textEdit.range),t.insertText=e.textEdit.newText),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map(Xt)),e.insertTextFormat===Ce.Snippet&&(t.insertTextRules=u.languages.CompletionItemInsertTextRule.InsertAsSnippet),t}));return{isIncomplete:n.isIncomplete,suggestions:o}}))}};function Bt(e){if(e)return{character:e.column-1,line:e.lineNumber-1}}function Wt(e){if(e)return{start:{line:e.startLineNumber-1,character:e.startColumn-1},end:{line:e.endLineNumber-1,character:e.endColumn-1}}}function Kt(e){if(e)return new u.Range(e.start.line+1,e.start.character+1,e.end.line+1,e.end.character+1)}function Ht(e){const t=u.languages.CompletionItemKind;switch(e){case be.Text:return t.Text;case be.Method:return t.Method;case be.Function:return t.Function;case be.Constructor:return t.Constructor;case be.Field:return t.Field;case be.Variable:return t.Variable;case be.Class:return t.Class;case be.Interface:return t.Interface;case be.Module:return t.Module;case be.Property:return t.Property;case be.Unit:return t.Unit;case be.Value:return t.Value;case be.Enum:return t.Enum;case be.Keyword:return t.Keyword;case be.Snippet:return t.Snippet;case be.Color:return t.Color;case be.File:return t.File;case be.Reference:return t.Reference}return t.Property}function Xt(e){if(e)return{range:Kt(e.range),text:e.newText}}var zt=class{constructor(e){this._worker=e}provideHover(e,t,n){let r=e.uri;return this._worker(r).then((e=>e.doHover(r.toString(),Bt(t)))).then((e=>{if(e)return{range:Kt(e.range),contents:$t(e.contents)}}))}};function qt(e){return"string"==typeof e?{value:e}:(t=e)&&"object"==typeof t&&"string"==typeof t.kind?"plaintext"===e.kind?{value:e.value.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}:{value:e.value}:{value:"```"+e.language+"\n"+e.value+"\n```\n"};var t}function $t(e){if(e)return Array.isArray(e)?e.map(qt):[qt(e)]}var Qt=class{constructor(e){this._worker=e}provideDocumentHighlights(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.findDocumentHighlights(r.toString(),Bt(t)))).then((e=>{if(e)return e.map((e=>({range:Kt(e.range),kind:Jt(e.kind)})))}))}};function Jt(e){switch(e){case je.Read:return u.languages.DocumentHighlightKind.Read;case je.Write:return u.languages.DocumentHighlightKind.Write;case je.Text:return u.languages.DocumentHighlightKind.Text}return u.languages.DocumentHighlightKind.Text}var Gt=class{constructor(e){this._worker=e}provideDefinition(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.findDefinition(r.toString(),Bt(t)))).then((e=>{if(e)return[Yt(e)]}))}};function Yt(e){return{uri:u.Uri.parse(e.uri),range:Kt(e.range)}}var Zt=class{constructor(e){this._worker=e}provideReferences(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.findReferences(i.toString(),Bt(t)))).then((e=>{if(e)return e.map(Yt)}))}},en=class{constructor(e){this._worker=e}provideRenameEdits(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.doRename(i.toString(),Bt(t),n))).then((e=>function(e){if(!e||!e.changes)return;let t=[];for(let n in e.changes){const r=u.Uri.parse(n);for(let i of e.changes[n])t.push({resource:r,versionId:void 0,textEdit:{range:Kt(i.range),text:i.newText}})}return{edits:t}}(e)))}},tn=class{constructor(e){this._worker=e}provideDocumentSymbols(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentSymbols(n.toString()))).then((e=>{if(e)return e.map((e=>"children"in e?nn(e):{name:e.name,detail:"",containerName:e.containerName,kind:rn(e.kind),range:Kt(e.location.range),selectionRange:Kt(e.location.range),tags:[]}))}))}};function nn(e){return{name:e.name,detail:e.detail??"",kind:rn(e.kind),range:Kt(e.range),selectionRange:Kt(e.selectionRange),tags:e.tags??[],children:(e.children??[]).map((e=>nn(e)))}}function rn(e){let t=u.languages.SymbolKind;switch(e){case Oe.File:return t.File;case Oe.Module:return t.Module;case Oe.Namespace:return t.Namespace;case Oe.Package:return t.Package;case Oe.Class:return t.Class;case Oe.Method:return t.Method;case Oe.Property:return t.Property;case Oe.Field:return t.Field;case Oe.Constructor:return t.Constructor;case Oe.Enum:return t.Enum;case Oe.Interface:return t.Interface;case Oe.Function:return t.Function;case Oe.Variable:return t.Variable;case Oe.Constant:return t.Constant;case Oe.String:return t.String;case Oe.Number:return t.Number;case Oe.Boolean:return t.Boolean;case Oe.Array:return t.Array}return t.Function}var on=class{constructor(e){this._worker=e}provideLinks(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentLinks(n.toString()))).then((e=>{if(e)return{links:e.map((e=>({range:Kt(e.range),url:e.target})))}}))}},an=class{constructor(e){this._worker=e}provideDocumentFormattingEdits(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.format(r.toString(),null,cn(t)).then((e=>{if(e&&0!==e.length)return e.map(Xt)}))))}},sn=class{constructor(e){this._worker=e,this.canFormatMultipleRanges=!1}provideDocumentRangeFormattingEdits(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.format(i.toString(),Wt(t),cn(n)).then((e=>{if(e&&0!==e.length)return e.map(Xt)}))))}};function cn(e){return{tabSize:e.tabSize,insertSpaces:e.insertSpaces}}var un,dn,ln=class{constructor(e){this._worker=e}provideDocumentColors(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentColors(n.toString()))).then((e=>{if(e)return e.map((e=>({color:e.color,range:Kt(e.range)})))}))}provideColorPresentations(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getColorPresentations(r.toString(),t.color,Wt(t.range)))).then((e=>{if(e)return e.map((e=>{let t={label:e.label};return e.textEdit&&(t.textEdit=Xt(e.textEdit)),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map(Xt)),t}))}))}},gn=class{constructor(e){this._worker=e}provideFoldingRanges(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getFoldingRanges(r.toString(),t))).then((e=>{if(e)return e.map((e=>{const t={start:e.startLine+1,end:e.endLine+1};return void 0!==e.kind&&(t.kind=function(e){switch(e){case L.Comment:return u.languages.FoldingRangeKind.Comment;case L.Imports:return u.languages.FoldingRangeKind.Imports;case L.Region:return u.languages.FoldingRangeKind.Region}}(e.kind)),t}))}))}},fn=class{constructor(e){this._worker=e}provideSelectionRanges(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getSelectionRanges(r.toString(),t.map(Bt)))).then((e=>{if(e)return e.map((e=>{const t=[];for(;e;)t.push({range:Kt(e.range)}),e=e.parent;return t}))}))}};function hn(e){return 32===e||9===e}function mn(e){return 10===e||13===e}function pn(e){return e>=48&&e<=57}(dn=un||(un={}))[dn.lineFeed=10]="lineFeed",dn[dn.carriageReturn=13]="carriageReturn",dn[dn.space=32]="space",dn[dn._0=48]="_0",dn[dn._1=49]="_1",dn[dn._2=50]="_2",dn[dn._3=51]="_3",dn[dn._4=52]="_4",dn[dn._5=53]="_5",dn[dn._6=54]="_6",dn[dn._7=55]="_7",dn[dn._8=56]="_8",dn[dn._9=57]="_9",dn[dn.a=97]="a",dn[dn.b=98]="b",dn[dn.c=99]="c",dn[dn.d=100]="d",dn[dn.e=101]="e",dn[dn.f=102]="f",dn[dn.g=103]="g",dn[dn.h=104]="h",dn[dn.i=105]="i",dn[dn.j=106]="j",dn[dn.k=107]="k",dn[dn.l=108]="l",dn[dn.m=109]="m",dn[dn.n=110]="n",dn[dn.o=111]="o",dn[dn.p=112]="p",dn[dn.q=113]="q",dn[dn.r=114]="r",dn[dn.s=115]="s",dn[dn.t=116]="t",dn[dn.u=117]="u",dn[dn.v=118]="v",dn[dn.w=119]="w",dn[dn.x=120]="x",dn[dn.y=121]="y",dn[dn.z=122]="z",dn[dn.A=65]="A",dn[dn.B=66]="B",dn[dn.C=67]="C",dn[dn.D=68]="D",dn[dn.E=69]="E",dn[dn.F=70]="F",dn[dn.G=71]="G",dn[dn.H=72]="H",dn[dn.I=73]="I",dn[dn.J=74]="J",dn[dn.K=75]="K",dn[dn.L=76]="L",dn[dn.M=77]="M",dn[dn.N=78]="N",dn[dn.O=79]="O",dn[dn.P=80]="P",dn[dn.Q=81]="Q",dn[dn.R=82]="R",dn[dn.S=83]="S",dn[dn.T=84]="T",dn[dn.U=85]="U",dn[dn.V=86]="V",dn[dn.W=87]="W",dn[dn.X=88]="X",dn[dn.Y=89]="Y",dn[dn.Z=90]="Z",dn[dn.asterisk=42]="asterisk",dn[dn.backslash=92]="backslash",dn[dn.closeBrace=125]="closeBrace",dn[dn.closeBracket=93]="closeBracket",dn[dn.colon=58]="colon",dn[dn.comma=44]="comma",dn[dn.dot=46]="dot",dn[dn.doubleQuote=34]="doubleQuote",dn[dn.minus=45]="minus",dn[dn.openBrace=123]="openBrace",dn[dn.openBracket=91]="openBracket",dn[dn.plus=43]="plus",dn[dn.slash=47]="slash",dn[dn.formFeed=12]="formFeed",dn[dn.tab=9]="tab",new Array(20).fill(0).map(((e,t)=>" ".repeat(t)));var vn,bn=200;new Array(bn).fill(0).map(((e,t)=>"\n"+" ".repeat(t))),new Array(bn).fill(0).map(((e,t)=>"\r"+" ".repeat(t))),new Array(bn).fill(0).map(((e,t)=>"\r\n"+" ".repeat(t))),new Array(bn).fill(0).map(((e,t)=>"\n"+"\t".repeat(t))),new Array(bn).fill(0).map(((e,t)=>"\r"+"\t".repeat(t))),new Array(bn).fill(0).map(((e,t)=>"\r\n"+"\t".repeat(t))),(vn||(vn={})).DEFAULT={allowTrailingComma:!1};var kn,Cn,_n,wn,yn,xn,En=function(e,t=!1){const n=e.length;let r=0,i="",o=0,a=16,s=0,c=0,u=0,d=0,l=0;function g(t,n){let i=0,o=0;for(;i<t||!n;){let t=e.charCodeAt(r);if(t>=48&&t<=57)o=16*o+t-48;else if(t>=65&&t<=70)o=16*o+t-65+10;else{if(!(t>=97&&t<=102))break;o=16*o+t-97+10}r++,i++}return i<t&&(o=-1),o}function f(){if(i="",l=0,o=r,c=s,d=u,r>=n)return o=n,a=17;let t=e.charCodeAt(r);if(hn(t)){do{r++,i+=String.fromCharCode(t),t=e.charCodeAt(r)}while(hn(t));return a=15}if(mn(t))return r++,i+=String.fromCharCode(t),13===t&&10===e.charCodeAt(r)&&(r++,i+="\n"),s++,u=r,a=14;switch(t){case 123:return r++,a=1;case 125:return r++,a=2;case 91:return r++,a=3;case 93:return r++,a=4;case 58:return r++,a=6;case 44:return r++,a=5;case 34:return r++,i=function(){let t="",i=r;for(;;){if(r>=n){t+=e.substring(i,r),l=2;break}const o=e.charCodeAt(r);if(34===o){t+=e.substring(i,r),r++;break}if(92!==o){if(o>=0&&o<=31){if(mn(o)){t+=e.substring(i,r),l=2;break}l=6}r++}else{if(t+=e.substring(i,r),r++,r>=n){l=2;break}switch(e.charCodeAt(r++)){case 34:t+='"';break;case 92:t+="\\";break;case 47:t+="/";break;case 98:t+="\b";break;case 102:t+="\f";break;case 110:t+="\n";break;case 114:t+="\r";break;case 116:t+="\t";break;case 117:const e=g(4,!0);e>=0?t+=String.fromCharCode(e):l=4;break;default:l=5}i=r}}return t}(),a=10;case 47:const c=r-1;if(47===e.charCodeAt(r+1)){for(r+=2;r<n&&!mn(e.charCodeAt(r));)r++;return i=e.substring(c,r),a=12}if(42===e.charCodeAt(r+1)){r+=2;const t=n-1;let o=!1;for(;r<t;){const t=e.charCodeAt(r);if(42===t&&47===e.charCodeAt(r+1)){r+=2,o=!0;break}r++,mn(t)&&(13===t&&10===e.charCodeAt(r)&&r++,s++,u=r)}return o||(r++,l=1),i=e.substring(c,r),a=13}return i+=String.fromCharCode(t),r++,a=16;case 45:if(i+=String.fromCharCode(t),r++,r===n||!pn(e.charCodeAt(r)))return a=16;case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return i+=function(){let t=r;if(48===e.charCodeAt(r))r++;else for(r++;r<e.length&&pn(e.charCodeAt(r));)r++;if(r<e.length&&46===e.charCodeAt(r)){if(r++,!(r<e.length&&pn(e.charCodeAt(r))))return l=3,e.substring(t,r);for(r++;r<e.length&&pn(e.charCodeAt(r));)r++}let n=r;if(r<e.length&&(69===e.charCodeAt(r)||101===e.charCodeAt(r)))if(r++,(r<e.length&&43===e.charCodeAt(r)||45===e.charCodeAt(r))&&r++,r<e.length&&pn(e.charCodeAt(r))){for(r++;r<e.length&&pn(e.charCodeAt(r));)r++;n=r}else l=3;return e.substring(t,n)}(),a=11;default:for(;r<n&&h(t);)r++,t=e.charCodeAt(r);if(o!==r){switch(i=e.substring(o,r),i){case"true":return a=8;case"false":return a=9;case"null":return a=7}return a=16}return i+=String.fromCharCode(t),r++,a=16}}function h(e){if(hn(e)||mn(e))return!1;switch(e){case 125:case 93:case 123:case 91:case 34:case 58:case 44:case 47:return!1}return!0}return{setPosition:function(e){r=e,i="",o=0,a=16,l=0},getPosition:()=>r,scan:t?function(){let e;do{e=f()}while(e>=12&&e<=15);return e}:f,getToken:()=>a,getTokenValue:()=>i,getTokenOffset:()=>o,getTokenLength:()=>r-o,getTokenStartLine:()=>c,getTokenStartCharacter:()=>o-d,getTokenError:()=>l}};(Cn=kn||(kn={}))[Cn.None=0]="None",Cn[Cn.UnexpectedEndOfComment=1]="UnexpectedEndOfComment",Cn[Cn.UnexpectedEndOfString=2]="UnexpectedEndOfString",Cn[Cn.UnexpectedEndOfNumber=3]="UnexpectedEndOfNumber",Cn[Cn.InvalidUnicode=4]="InvalidUnicode",Cn[Cn.InvalidEscapeCharacter=5]="InvalidEscapeCharacter",Cn[Cn.InvalidCharacter=6]="InvalidCharacter",(wn=_n||(_n={}))[wn.OpenBraceToken=1]="OpenBraceToken",wn[wn.CloseBraceToken=2]="CloseBraceToken",wn[wn.OpenBracketToken=3]="OpenBracketToken",wn[wn.CloseBracketToken=4]="CloseBracketToken",wn[wn.CommaToken=5]="CommaToken",wn[wn.ColonToken=6]="ColonToken",wn[wn.NullKeyword=7]="NullKeyword",wn[wn.TrueKeyword=8]="TrueKeyword",wn[wn.FalseKeyword=9]="FalseKeyword",wn[wn.StringLiteral=10]="StringLiteral",wn[wn.NumericLiteral=11]="NumericLiteral",wn[wn.LineCommentTrivia=12]="LineCommentTrivia",wn[wn.BlockCommentTrivia=13]="BlockCommentTrivia",wn[wn.LineBreakTrivia=14]="LineBreakTrivia",wn[wn.Trivia=15]="Trivia",wn[wn.Unknown=16]="Unknown",wn[wn.EOF=17]="EOF",(xn=yn||(yn={}))[xn.InvalidSymbol=1]="InvalidSymbol",xn[xn.InvalidNumberFormat=2]="InvalidNumberFormat",xn[xn.PropertyNameExpected=3]="PropertyNameExpected",xn[xn.ValueExpected=4]="ValueExpected",xn[xn.ColonExpected=5]="ColonExpected",xn[xn.CommaExpected=6]="CommaExpected",xn[xn.CloseBraceExpected=7]="CloseBraceExpected",xn[xn.CloseBracketExpected=8]="CloseBracketExpected",xn[xn.EndOfFileExpected=9]="EndOfFileExpected",xn[xn.InvalidCommentToken=10]="InvalidCommentToken",xn[xn.UnexpectedEndOfComment=11]="UnexpectedEndOfComment",xn[xn.UnexpectedEndOfString=12]="UnexpectedEndOfString",xn[xn.UnexpectedEndOfNumber=13]="UnexpectedEndOfNumber",xn[xn.InvalidUnicode=14]="InvalidUnicode",xn[xn.InvalidEscapeCharacter=15]="InvalidEscapeCharacter",xn[xn.InvalidCharacter=16]="InvalidCharacter";var In,An="delimiter.bracket.json",Sn="delimiter.array.json",Tn="delimiter.colon.json",Ln="delimiter.comma.json",Rn="keyword.json",Mn="keyword.json",Fn="string.value.json",Pn="number.json",jn="string.key.json",Dn="comment.block.json",Nn="comment.line.json",On=class e{constructor(e,t){this.parent=e,this.type=t}static pop(e){return e?e.parent:null}static push(t,n){return new e(t,n)}static equals(e,t){if(!e&&!t)return!0;if(!e||!t)return!1;for(;e&&t;){if(e===t)return!0;if(e.type!==t.type)return!1;e=e.parent,t=t.parent}return!0}},Un=class e{constructor(e,t,n,r){this._state=e,this.scanError=t,this.lastWasColon=n,this.parents=r}clone(){return new e(this._state,this.scanError,this.lastWasColon,this.parents)}equals(t){return t===this||!!(t&&t instanceof e)&&this.scanError===t.scanError&&this.lastWasColon===t.lastWasColon&&On.equals(this.parents,t.parents)}getStateData(){return this._state}setStateData(e){this._state=e}};function Vn(){return new Promise(((e,t)=>{if(!In)return t("JSON not registered!");e(In)}))}var Bn=class extends Ot{constructor(e,t,n){super(e,t,n.onDidChange),this._disposables.push(u.editor.onWillDisposeModel((e=>{this._resetSchema(e.uri)}))),this._disposables.push(u.editor.onDidChangeModelLanguage((e=>{this._resetSchema(e.model.uri)})))}_resetSchema(e){this._worker().then((t=>{t.resetSchema(e.toString())}))}};function Wn(e){const t=[],n=[],r=new jt(e);function i(){const{languageId:t,modeConfiguration:r}=e;var i;Hn(n),r.documentFormattingEdits&&n.push(u.languages.registerDocumentFormattingEditProvider(t,new an(In))),r.documentRangeFormattingEdits&&n.push(u.languages.registerDocumentRangeFormattingEditProvider(t,new sn(In))),r.completionItems&&n.push(u.languages.registerCompletionItemProvider(t,new Vt(In,[" ",":",'"']))),r.hovers&&n.push(u.languages.registerHoverProvider(t,new zt(In))),r.documentSymbols&&n.push(u.languages.registerDocumentSymbolProvider(t,new tn(In))),r.tokens&&n.push(u.languages.setTokensProvider(t,(i=!0,{getInitialState:()=>new Un(null,null,!1,null),tokenize:(e,t)=>function(e,t,n,r=0){let i=0,o=!1;switch(n.scanError){case 2:t='"'+t,i=1;break;case 1:t="/*"+t,i=2}const a=En(t);let s=n.lastWasColon,c=n.parents;const u={tokens:[],endState:n.clone()};for(;;){let d=r+a.getPosition(),l="";const g=a.scan();if(17===g)break;if(d===r+a.getPosition())throw new Error("Scanner did not advance, next 3 characters are: "+t.substr(a.getPosition(),3));switch(o&&(d-=i),o=i>0,g){case 1:c=On.push(c,0),l=An,s=!1;break;case 2:c=On.pop(c),l=An,s=!1;break;case 3:c=On.push(c,1),l=Sn,s=!1;break;case 4:c=On.pop(c),l=Sn,s=!1;break;case 6:l=Tn,s=!0;break;case 5:l=Ln,s=!1;break;case 8:case 9:l=Rn,s=!1;break;case 7:l=Mn,s=!1;break;case 10:const e=c?c.type:0;l=s||1===e?Fn:jn,s=!1;break;case 11:l=Pn,s=!1}if(e)switch(g){case 12:l=Nn;break;case 13:l=Dn}u.endState=new Un(n.getStateData(),a.getTokenError(),s,c),u.tokens.push({startIndex:d,scopes:l})}return u}(i,e,t)}))),r.colors&&n.push(u.languages.registerColorProvider(t,new ln(In))),r.foldingRanges&&n.push(u.languages.registerFoldingRangeProvider(t,new gn(In))),r.diagnostics&&n.push(new Bn(t,In,e)),r.selectionRanges&&n.push(u.languages.registerSelectionRangeProvider(t,new fn(In)))}t.push(r),In=(...e)=>r.getLanguageServiceWorker(...e),i(),t.push(u.languages.setLanguageConfiguration(e.languageId,Xn));let o=e.modeConfiguration;return e.onDidChange((e=>{e.modeConfiguration!==o&&(o=e.modeConfiguration,i())})),t.push(Kn(n)),Kn(t)}function Kn(e){return{dispose:()=>Hn(e)}}function Hn(e){for(;e.length;)e.pop().dispose()}var Xn={wordPattern:/(-?\d*\.\d\w*)|([^\[\{\]\}\:\"\,\s]+)/g,comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"]],autoClosingPairs:[{open:"{",close:"}",notIn:["string"]},{open:"[",close:"]",notIn:["string"]},{open:'"',close:'"',notIn:["string"]}]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,